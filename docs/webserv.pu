@startuml webserv

skinparam monochrome true
skinparam shadowing false

class Webserv {
  - max_fd : int
  - sockets : map<int, Socket>
  + Activate() : void
  - ParseConfig(const string&) : void
  - HasUsableIO() : int
  - AcceptSession(map<int, Socket>::iterator) : void
  - ReadClient(map<int, Socket>::iterator) : void
  - ReadFile(map<int, Socket>::iterator) : void
  - ReadCGI(map<int, Socket>::iterator) : void
  - WriteClient(map<int, Socket>::iterator) : void
  - WriteFile(map<int, Socket>::iterator) : void
  - WriteCGI(map<int, Socket>::iterator) : void
}

interface ISocket {
  # address : struct sockaddr_in
  # port : int
  # host : char*
  # config : struct Config
}

class Server {
  + SetSocket() : int
  + Accept() : int
}

class Client {
  - request : Request
  - response : Response
  - write_fd : int
  - read_fd : int
  - status : enum ClientStatus
  + SetSocket(int) : int
  + SetEventStatus(enum ClientStatus) : void
  + BranchRequest(int) : enum SocketStatus
  + ReadFile(int) : bool
  + WriteFile(int) : bool
  + WriteCGI(int) : bool
  + ReadCGI(int) : bool
  + HandleResponse(int) : bool
  + GetWriteFd() const : int
  + GetReadFd() const : int
  + GetStatus() const : enum ClientStatus
}

class HttpMessage {
  - status : enum ParseStatus
  - delim : string
  - raw : string
  - http_version : string
  - headers : map<string, string>
  - body : string
  + AppendRawData(const string&) : void
  + AppendHeader(const string&, const string&) : void
  + AppendHeader(const pair<string, string>&) : void
  + AppendBody(const string&) : void
  + RemoveHeader(const string&)
  + SetVersion(const string&) : void
  + GetVersion() const : const string&
  + GetAllHeader() const : const map<string, string>&
  + GetHeader(const string&) const : const string&
  + GetBody() const : const string&
  + Now(time_t) : string
  + Clear(): void
  - {abstract} ParseMessage() : void
  - {abstract} ParseStartline() : void
  - {abstract} ParseHeader() : void
  - {abstract} ParseBody() : void
}

class Request {
  - method : enum Method
  - uri : string
  + GetMethod() const : enum Method
  + GetURI() const : const string&
  + GetStatus() const : enum ParseStatus
  + Clear() : void
  - {abstract} ParseMessage() : void
  - {abstract} ParseStartline() : void
  - {abstract} ParseHeader() : void
  - {abstract} ParseBody() : void
}

class Response {
  - status_code : int
  - status_message : string
  + {static} const kResponseStatus : Status
  + SetStatusCode(int) : void
  + GetStatusCode() const : int
  + GetStautsMessage() const : const string&
  + EndCGI() : void
  + Str() : string
  + Clear() : void
  - SetStatusMessage(const string&) : void
  - {abstract} ParseMessage() : void
  - {abstract} ParseStartline() : void
  - {abstract} ParseHeader() : void
  - {abstract} ParseBody() : void
}

enum Method {
  GET
  POST
  DELETE
  INVALID
}

enum SocketStatus {
  READ_CLIENT
  READ_FILE
  READ_CGI
  WRITE_CGI
  WRITE_FILE
  WRITE_CLIENT
}

class config::Parser {
  + GetConfigs() : vector<struct config::Config>
  + Print() : void
  - servers_ : vector<struct config::Server>
}

class config::Config {}

class config::Server {
  + autoindex : bool
  + id : int
  + port : int
  + client_max_body_size : int
  + host : string
  + server_name : string
  + upload_pass : string
  + upload_store : string
  + extensions : set<string>
  + indexes : set<string>
  + error_pages : map<int, string>
  + redirect : pair<int, string>
  + locations : vector<struct config::Location>
}

class config::Location {
  + autoindex : bool
  + client_max_body_size : int
  + path : string
  + alias : string
  + upload_pass : string
  + upload_store : string
  + extensions : set<string>
  + indexes : set<string>
  + error_pages : map<int, string>
  + allowed_methods : set<enum Method>
  + redirect : pair<int, string>
}

Webserv *--> ISocket
ISocket <|-- Client
ISocket <|-- Server
Client *--> Request
Client *--> Response
HttpMessage <|-- Request
HttpMessage <|-- Response
config::Server *-- config::Location
config::Config <|-- config::Server
Server *-- config::Config

@enduml
